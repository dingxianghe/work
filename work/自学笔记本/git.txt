mkdir 目录名字// 创建一个目录
cd 目录名字//找到这个目录
pwd //查看该目录路径
git init//把目录变成Git可以管理的仓库

git add 文件名//添加文件
git commit -m "wrote a 文件名 file"//提交到仓库
git status//查看文件修改结果
git diff//查看文件修改的内容
git commit -m "add distributed"//提交修改后的内容
git log//查看详细的历史纪录 输入q退出
git log --pretty=oneline//查看简练的历史纪录
git reset --hard HEAD^//退回到上一个版本 
HEAD表示版本  HEAD^^表示退回两个版本 HEAD~100表示退回100个
git reset --hard 版本号//又返回之前的版本号 只要写前几位数
git reflog//纪录你的操作指令
git checkout -- 文件名//撤销本次修改到暂存区
git reset HEAD 文件名//撤销暂存区的修改回到工作区
rm 文件名//删除该文件
git rm 文件名//确认删除 并且提交//误删则撤销

建立远程仓库
$ ssh-keygen -t rsa -C "dingxianghe126@qq.com"//创建钥匙
$ git remote add origin git@github.com:用户名/仓库名.git//要关联一个远程库
git push -u origin master//第一次推送master分支的所有内容；
git push origin master//推送最新修改；
git clone git@github.com:用户名/仓库名.git//克隆一个库到本地
$ cd 目录名//创建目录
$ ls//进入到目录

 提示出错信息：fatal: remote origin already exists.
    解决办法：输入$ git remote rm origin


建立分支
git checkout -b 分支名//建立一个分支并指向该分支
git branch//查看所有分支 前面加*的是当前分支
git checkout master//切换回master分支
git merge 分支名//将某分支合并到当前分支上面来
git branch -d 分支名//删除分支
git merge --no-ff -m "备注名" 分支名//禁止使用Fast forward模式合并某分支
git stash//存储当前工作区的内容
git stash list//查看刚才存储的工作区
git stash pop//恢复存储的内容，同时把原内容记录也删了
git stash apply stash@{0}//多条记录时，恢复到第0条
git branch -D 分支名//强行删除一个为合并过的分支

git remote -v//远程仓库的信息
git push origin master//推送分支master到仓库origin
git checkout -b dev origin/dev//在本地创建和远程分支对应的分支
git pull//把最新的提交从origin/dev抓下来

因此，多人协作的工作模式通常是这样：

首先，可以试图用git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”
则说明本地分支和远程分支的链接关系没有创建，
用命令git branch --set-upstream branch-name origin/branch-name。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。

创建标签
先切换到需要打标签的分支上
git tag 标签名//打上标签
git tag//查看所有标签
git tag 标签名 版本的ID号//根据ID号找到对应版本的打上标签名
git show 标签名//查看该标签的信息

还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
将-a改为-s 就可以用PGP签名标签（不可伪造）
git tag -a 标签名 -m "说明文字" 版本的ID号//

命令git push origin 标签名//可以推送一个本地标签；
命令git push origin --tags//可以推送全部未推送过的本地标签；
命令git tag -d 标签名//可以删除一个本地标签；
命令git push origin :refs/tags/标签名//可以删除一个远程标签。

自定义Git
我们只需要敲一行命令，告诉Git，以后st就表示status：

git config --global alias.st status
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.br branch